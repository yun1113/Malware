from __future__ import absolute_import

from celery import shared_task
from subprocess import Popen, PIPE
from malwaredb.virus_api import get_api
from malwaredb.models import Malware
import docker
import os
import time


@shared_task
def temuWork(hash_value):

    # call virustotal API
    get_api(hash_value)

    # start a docker container
    p = Popen(['docker run -v /home/hcy/Malware/VMimage:/home/root/VMimage -v '
               '/home/hcy/Malware/project/vmp/media:/home/root/malware '
               '-v /home/hcy/Malware/automation:/home/root/automation '
               '-v /home/hcy/Malware/project/vmp/malwaredb:/home/root/malwaredb '
               '--privileged -i 7568fc0fa776  /bin/bash'], stdout=PIPE, stdin=PIPE, shell=True)

    # send command
    result = p.communicate(input=bytes('python /home/root/automation/script/winmalware.py '
                                       '/home/root/malware/'+str(hash_value)+' /home/root/automation/output'))[0]

    create_hooklog_state = hooklog_to_html(hash_value)
    Malware.objects.filter(hash_value=hash_value).update(create_hooklog_state=create_hooklog_state)

    return "Hash:{0}, ResultCode: {1}, Hooklog created: {2}".format(hash_value, result.decode(), create_hooklog_state)


@shared_task
def profiling(hash_value):
    print("Step1. Create Client")
    client = docker.APIClient(base_url='unix://var/run/docker.sock')
    # sh / home / root / automation / profiling.sh {0}
    print("Step2. Create container")
    container = client.create_container(image='7568fc0fa776', stdin_open=True, tty=True,
                                        command=['python', '/home/root/automation/script/winmalware.py',
                                                 '/home/root/malware/{0}'.format(hash_value), '/home/root/automation/output'],
                                        volumes=['/home/root/VMimage', '/home/root/malware', '/home/root/automation',
                                                 '/home/root/malwaredb'],
                                        host_config=client.create_host_config(privileged=True, binds=[
                                            '/home/hcy/Malware/VMimage:/home/root/VMimage',
                                            '/home/hcy/Malware/project/vmp/media:/home/root/malware',
                                            '/home/hcy/Malware/automation:/home/root/automation',
                                            '/home/hcy/Malware/project/vmp/malwaredb:/home/root/malwaredb']))

    print("Step3. Start Container")
    client.start(container)

    print("Step4. After 10 mins...")
    time.sleep(600)  # 10 min
    # print(cli.logs(container))

    while len(client.containers(filters={'id': container['Id']})) != 0:
        print("Step5. After more 1 min...")
        time.sleep(60)

    create_hooklog_state = hooklog_to_html(hash_value)
    Malware.objects.filter(hash=hash_value).update(create_hooklog_state=create_hooklog_state)

    print("Step6. Excute Log")
    print(client.logs(container))

    print("Step7. Remove Container")
    client.remove_container(container['Id'])


def hooklog_to_html(hash):
    # sleep(900)
    output_path = "/home/hcy/Malware/automation/output"
    for filename in os.listdir(output_path):
        if hash in filename:
            if ".hooklog" in filename:
                print("hooklog_to_html: " + filename)
                Popen(["python", "/home/hcy/Malware/automation/script/hook-html.py", filename])
                return True
    return False

# for dirpath,dirname,filename in os.walk(output_path):
# 	for fn in filename:
# 		if "malware" in fn:
# 			call(["mv", os.path.join(dirpath, fn), os.path.join(dirpath, hash + "_" + fn.split("_")[1])])
# 			if ".hooklog" in fn:
# 				Popen (["python","/home/profile/website/automation/script/hook-html.py", hash + "_" + fn.split("_")[1]])
# 		elif hash in fn:
# 			if ".hooklog" in fn:
# 				Popen (["python","/home/profile/website/automation/script/hook-html.py", hash + "_" + fn.split("_")[1]])
