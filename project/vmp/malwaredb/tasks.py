from __future__ import absolute_import

from celery import shared_task

from time import sleep
from subprocess import Popen, PIPE, call
from malwaredb.virus_api import getApi
from django.core.cache import cache
from docker import Client
import os

# port = 50000

@shared_task
def temuWork(hash):
	# port = cache.get('port', 50000)
	# if port > 65000:
	# 	port = 50000
	# p = Popen(['docker run -v /mnt/container_storage/webapp/VMimage:/home/root/VMimage -v /mnt/container_storage/webapp/vmp/media:/home/root/malware -v /mnt/container_storage/webapp/automation:/home/root/automation -v /mnt/container_storage/webapp/vmp/malwaredb/:/home/root/malwaredb -p 4444' + str(port)+ ' --privileged -i ed9a3dbb69bf  /bin/bash'], stdout=PIPE, stdin=PIPE, shell=True)
	# port += 1
	# cache.set('port', port)
	
	# call virustotal API
	getApi(hash)
	
	
	# start a docker container
	p = Popen(['docker run -v /home/profile/website/VMimage:/home/root/VMimage -v /home/profile/website/project/vmp/media:/home/root/malware -v /home/profile/website/automation:/home/root/automation -v /home/profile/website/project/vmp/malwaredb:/home/root/malwaredb --privileged -i 7d7212029c3b  /bin/bash'], stdout=PIPE, stdin=PIPE, shell=True)
	# send command
	result = p.communicate(input=bytes('python /home/root/automation/script/winmalware.py /home/root/malware/'+str(hash)+' /home/root/automation/output'))[0]

	hooklog_to_html(hash)
	return " Hash " + hash + " ResultCode " + result.decode()
	# return 

@shared_task
def profiling(hash):
	print("Step1. Create Client")
	cli = Client(base_url='unix://var/run/docker.sock')

	print("Step2. Create container")
	container = cli.create_container(image='f61b3e2628c5', stdin_open=True, tty=True, command='python /home/root/automation/script/winmalware.py /home/root/malware/'+ hash + ' /home/root/automation/output/', volumes=['/home/root/VMimage', '/home/root/malware','/home/root/automation'],host_config=cli.create_host_config(privileged=True, binds=[ '/home/profile/website/VMimage:/home/root/VMimage', '/home/profile/website/vmp/vmp/media:/home/root/malware', '/home/profile/website/automation:/home/root/automation',]))

	print("Step3. Start Container")
	cli.start(container)

	print("Step4. After 15 mins...")
	time.sleep(900) # 15 min
	print(cli.logs(container))

	while len(cli.containers(filters={'id': container['Id']})) != 0:
		print("Step5. After more 1 min...")
		time.sleep(60)

	print("Step6. Excute Log")
	print(cli.logs(container))

	print("Step7. Remove Container")
	cli.remove_container(container['Id'])

def hooklog_to_html(hash):
	# sleep(900)
	output_path = "/home/profile/website/automation/output"

	for filename in os.listdir(output_path):
		if hash in filename:
			if ".hooklog" in filename:
				print("hooklog_to_html: " + filename)
				Popen (["python","/home/profile/website/automation/script/hook-html.py", filename])

	# for dirpath,dirname,filename in os.walk(output_path):
	# 	for fn in filename:
	# 		if "malware" in fn:
	# 			call(["mv", os.path.join(dirpath, fn), os.path.join(dirpath, hash + "_" + fn.split("_")[1])])
	# 			if ".hooklog" in fn:
	# 				Popen (["python","/home/profile/website/automation/script/hook-html.py", hash + "_" + fn.split("_")[1]])
	# 		elif hash in fn:
	# 			if ".hooklog" in fn:
	# 				Popen (["python","/home/profile/website/automation/script/hook-html.py", hash + "_" + fn.split("_")[1]])
			