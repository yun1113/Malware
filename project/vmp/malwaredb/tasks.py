from __future__ import absolute_import

from celery import shared_task
from subprocess import Popen
from malwaredb.virus_api import get_api
from malwaredb.models import Malware, Hooklog
from django.conf import settings

import docker
import os
import time

BASE_DIR = settings.BASE_DIR


@shared_task
def profiling(hash_value, streaming=False, server_ip="140.112.107.39", server_port="10001"):

    for i in range(3):  # try three times

        print("Step1. Create Client")
        client = docker.APIClient(base_url='unix://var/run/docker.sock', version='1.21')
        get_api(hash_value)

        print("Step2. Create container")
        container = client.create_container(image='56ba2825eb9b', stdin_open=True, tty=True,
                                            command="./home/root/automation/script/profiling.sh {0} {1} {2} {3}".format(hash_value, "true" if streaming else "false", server_ip, server_port),
                                            volumes=['/home/root/VMimage', '/home/root/malware', '/home/root/automation',
                                                     '/home/root/malwaredb'],
                                            host_config=client.create_host_config(privileged=True, binds=[
                                                BASE_DIR + '/VMimage:/home/root/VMimage',
                                                BASE_DIR + '/media/uploads:/home/root/malware',
                                                BASE_DIR + '/automation:/home/root/automation',
                                                BASE_DIR + '/malwaredb:/home/root/malwaredb']))

        print("Step3. Start Container")
        client.start(container)

        print("Step4. After 10 mins...")
        time.sleep(600)  # 10 min
        # print(cli.logs(container))

        while len(client.containers(filters={'id': container['Id']})) != 0:
            print("Step5. After more 1 min...")
            time.sleep(60)

        create_hooklog_state = hooklog_to_html(hash_value)
        if create_hooklog_state:
            Malware.objects.filter(hash=hash_value).update(create_hooklog_state=create_hooklog_state)
            print("Step6. Remove Container")
            client.remove_container(container['Id'])
            break
        else:
            print("Step6. Excute Log")
            with open(BASE_DIR + "/malwaredb/docker_logs/"+container['Id']+"_"+str(i), "w") as f:
                f.write(client.logs(container))
            print("Step7. Remove Container")
            client.remove_container(container['Id'])
            # print(client.logs(container))


def hooklog_to_html(hash):
    success = False
    output_path = BASE_DIR + "/automation/output/"
    for filename in os.listdir(output_path):
        if hash in filename and ".hooklog" in filename:
            # update hooklog model
            with open(output_path + filename, "r") as f:
                malware = Malware.objects.get(sha256=hash)
                content = f.read()
                hooklog, created = Hooklog.objects.get_or_create(hooklog=content, malware=malware)
                f.seek(0)
                hooklog.hooklog_file.save(filename, f)

            print("hooklog_to_html: " + filename)
            Popen(["python", BASE_DIR + "/automation/script/hook-html.py", filename])
            success = True
    return success
