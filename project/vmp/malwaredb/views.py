# -*- coding: utf-8 -*-
from django.shortcuts import render, render_to_response, redirect
from django.db.models import Q
from django.conf import settings
from django.core.mail import EmailMessage
from django.contrib import auth

from malwaredb.tasks import profiling
from malwaredb.models import Malware, Upload, VirusTotalInfo
from malwaredb.forms import MalwareUploadFileForm, ContactForm, UserCreationForm
from user_account.models import UserAccount

from django.contrib.auth.models import User
from django.contrib.auth.forms import AuthenticationForm
from django.test import RequestFactory

from datetime import datetime

from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_expiring_authtoken.models import ExpiringToken
from rest_framework_expiring_authtoken.views import ObtainExpiringAuthToken

import hashlib
import os
import tempfile
import base64

MEDIA_ROOT = settings.MEDIA_ROOT
TEMPLATE_ROOT = settings.TEMPLATES[0]['DIRS'][0]

# ====================================  API ====================================

class CustomObtainExpiringAuthToken(ObtainExpiringAuthToken):

    def post(self, request, *args, **kwargs):
        submit_data = dict(request.data)
        try:
            user = User.objects.get(username=submit_data['username'][0])
        except KeyError:
            return Response({'status_code': 400, "detail": "No input username"})
        except User.DoesNotExist:
            return Response({'status_code': 404, "detail": "User not found"})

        try:
            authenticate = user.check_password(submit_data['password'][0])
        except KeyError:
            return Response({'status_code': 400, "detail": "No input password"})

        if authenticate:
            token, _ = ExpiringToken.objects.get_or_create(user=user)

            if token.expired():
                # If the token is expired, generate a new one.
                token.delete()
                token = ExpiringToken.objects.create(
                    user=user
                )

            return Response({'status_code': 200, 'token': token.key})
        else:
            return Response({'status_code': 401, "detail": "Wrong Password"})


class SubmitFileView(APIView):

    def post(self, request, *args, **kwargs):
        submit_data = dict(request.data)

        try:
            # transfer base64 to file
            f = submit_data["file"][0]
            with tempfile.NamedTemporaryFile(dir=MEDIA_ROOT + "/tmp") as temp:
                temp.write(base64.decodestring(f))

                temp.seek(0)
                factory = RequestFactory()
                fake_request = factory.post('/malwareupload/', {'uploadedfile': open(temp.name, 'rb'),
                                                                'streaming': submit_data.get("streaming", False),
                                                                })
                fake_request.user = request.user
                hash_value = malwareuploadFromLocal(fake_request)
            if submit_data.get("streaming", False):
                return Response({'status_code': 200, 'SHA-256': hash_value,
                                 'server_ip': "140.112.107.39", 'server_port': '10001'})
            return Response({'status_code': 200, 'SHA-256': hash_value})
        except KeyError:
            return Response({'status_code': 400, "detail": "No submit file"})


class GetHooklogView(APIView):

    def get(self, request, *args, **kwargs):
        # get data
        submit_data = dict(request.data)
        sha256 = submit_data["SHA256"][0]

        # check malware exist
        try:
            mal = Malware.objects.get(hash=sha256)
        except Malware.DoesNotExist:
            return Response({'status_code': 404, 'detail': 'SHA-256 not found'})


        # check profiling fininshed
        if not mal.create_hooklog_state:
            return Response({'status_code': 404, 'detail': 'Profiling result not found'})

        # success, return hooklog
        hooklog_dir = TEMPLATE_ROOT + "/hooklog/"
        hooklogs = [f for f in os.listdir(hooklog_dir) if sha256 in f]
        response_hooklog = []
        for hooklog in  hooklogs:
            with open(hooklog_dir+hooklog, "r") as hooklog_file:
                encoded_string = base64.b64encode(hooklog_file.read())
            hooklog_dict = {
                'filename': hooklog,
                'hooklog': encoded_string
            }
            response_hooklog.append(hooklog_dict)

        return Response({'status_code': 200, 'hooklog': response_hooklog})

# ====================================  /API ====================================

def get_index(request):
    upload_form = MalwareUploadFileForm()
    signup_form = UserCreationForm()
    login_form = AuthenticationForm()

    if request.method == 'POST':

        if 'log-in' in request.POST:
            login_form = AuthenticationForm(data=request.POST)
            if login_form.is_valid():
                user = auth.authenticate(username=login_form.cleaned_data['username'],
                                         password=login_form.cleaned_data['password'])

                if user is not None and user.is_active:
                    auth.login(request, user)
                login_success = True
            else:
                login_fail = True

        elif 'sign-up' in request.POST:
            signup_form = UserCreationForm(request.POST)
            if signup_form.is_valid():
                user = signup_form.save()
                user_account = UserAccount.objects.create(user=user, create_date=datetime.now())

                user = auth.authenticate(username=signup_form.cleaned_data['username'],
                                         password=signup_form.cleaned_data['password1'])
                if user is not None and user.is_active:
                    auth.login(request, user)

                signup_success = True
            else:
                signup_fail = True

        elif 'upload' in request.POST:
            upload_form = MalwareUploadFileForm(request.POST, request.FILES)
            if upload_form.is_valid():
                f = request.FILES['file']

                # get hash value
                hash_value = hash_uploaded_file(f)

                # Save file to media
                success = handle_upload_file(f, hash_value)

                u = handle_file(f, hash_value, request)

    malware_num = len(Malware.objects.filter(~Q(detectionrate=0)))
    upload_num = len(Upload.objects.all())
    analysis_num = len(Malware.objects.all())

    return render(request, 'malware.html', locals())


def malware_search(request):
    # Search by Hash
    if request.GET.get('MD5', '') != "":
        searchText = request.GET['MD5']
        malware = Malware.objects.filter(Q(md5=searchText)).first()
        vendor_list = VirusTotalInfo.objects.filter(Q(malware=malware)).order_by('vendor')
    elif request.GET.get('SHA1', '') != "":
        searchText = request.GET['SHA1']
        malware = Malware.objects.filter(Q(sha1=searchText)).first()
        vendor_list = VirusTotalInfo.objects.filter(Q(malware=malware)).order_by('vendor')
    elif request.GET.get('SHA256', '') != "":
        searchText = request.GET['SHA256']
        malware = Malware.objects.filter(Q(sha256=searchText)).first()
        vendor_list = VirusTotalInfo.objects.filter(Q(malware=malware)).order_by('vendor')
    # Search by Keyword
    elif request.GET.get('keyword', '') != "":
        print("k")
        keyword = request.GET['keyword']
        vendor_list = VirusTotalInfo.objects.filter(Q(label__contains=keyword)).order_by('vendor')
    # Search by Family
    elif request.GET.get('family', '') != "":
        return render_to_response('malware_family.html', locals())
        # Search by Family
    elif request.GET.get('behaviorgroup', '') != "":
        return render_to_response('malware_behavior.html', locals())
    else:
        searchText = request.GET['hashSearchText']

    return render_to_response('malware_search.html', {'vendor_list': vendor_list})


def malware_family(request):
    return render_to_response('malware_family.html', locals())


def malware_behavior(request):
    return render_to_response('malware_behavior.html', locals())


def malware_download(request):
    file_dir = TEMPLATE_ROOT + '/hooklog/'
    malware = request.GET['malware']
    malwares = Malware.objects.filter(sha256=malware)
    malware_hooklog = ""
    for filename in os.listdir(file_dir):
        if malwares[0].sha256 in filename:
            malware_hooklog = filename
            break
    filepath = file_dir + malware_hooklog
    # return serve(request, os.path.basename(filepath), os.path.dirname(filepath))
    from django.utils.encoding import smart_str
    from django.http import HttpResponse

    response = HttpResponse(
        content_type='application/octet-stream')
    response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(malware_hooklog)
    response['X-Sendfile'] = smart_str(filepath)
    return response


def malware_detail(request):
    malware_name = request.GET['malware']
    malware = Malware.objects.filter(hash=malware_name).first()

    hooklog_list = []
    for filename in os.listdir(TEMPLATE_ROOT+"/hooklog/"):
        if malware_name in filename:
            hooklog_list.append(filename)
    print(hooklog_list)
    return render_to_response('malware_detail.html', locals())


def load_hooklog_page(request, hash_value, page):
    if page != '' and int(page) > 0:
        hooklog_list = []
        for filename in os.listdir(TEMPLATE_ROOT+"/hooklog/"):
            if hash_value in filename:
                hooklog_list.append(filename)
        return render(request, "hooklog/" + hooklog_list[int(page) - 1], locals())
    else:
        return render(request, '404.html')


def contact(request):
    form_class = ContactForm

    if request.method == 'POST':
        form = form_class(data=request.POST)

        if form.is_valid():
            contact_name = request.POST.get('name', '')
            contact_email = request.POST.get('email', '')
            form_title = request.POST.get('title', '')
            form_content = request.POST.get('content', '')

            content = "Name: {0}\n" \
                      "Email: {1}\n" \
                      "Ttile: {2}\n" \
                      "Content: {3}".format(contact_name, contact_email, form_title, form_content)

            email = EmailMessage(
                "New contact form submission",
                content,
                "Your website" + '',
                ['yunyun1113c@gmail.com'],
                headers={'Reply-To': contact_email}
            )
            email.send()
            return redirect('contact')
    return render(request, 'contact.html', {
        'form': form_class,
    })


def loadvt(request, hash_value):
    if hash_value != '':
        return render(request, str(hash_value) + '_json.html', locals())
    else:
        return render(request, '404.html')


def malwareuploadFromLocal(request):
    if request.method == 'POST':
        f = request.FILES['uploadedfile']

        # Add to Upload model
        hash_value = hash_uploaded_file(f)

        # Save file
        success = handle_upload_file(f, hash_value)

        u = handle_file(f, hash_value, request)

    return hash_value


def handle_file(f, hash_value, request):
    # Add to Upload model
    u = Upload()
    u.file = request.FILES['file']
    u.name = f.name
    u.size = f.size
    u.hash = hash_value
    u.submissiondate = datetime.now()
    u.user_ip = request.META.get('REMOTE_ADDR')
    if request.user:
        user_account = UserAccount.objects.filter(user=request.user)[0]

    u.user_account = user_account

    u.save()

    # if malware not exist in db
    if len(Malware.objects.filter(hash=hash_value)) == 0:
        # insert Malware data
        m = Malware()
        m.hash = hash_value
        m.submissiondate = datetime.now()
        m.detectionrate = 0.8
        m.virustotalurl = hash_value
        m.vmp = hash_value
        m.save()

    # Celery task
    if request.POST.get("streaming", False):
        profiling.delay(hash_value, True)
    else:
        profiling.delay(hash_value)

    return u


def hash_uploaded_file(f):
    ''' Input file then return file's hash value
    Args:
        f: a file upload by user 
    Return:
        hash: file's hash value
    '''
    hash_value = hashlib.sha256()
    for chunk in f.chunks():
        hash_value.update(chunk)
    return hash_value.hexdigest()


def handle_upload_file(f, hash):
    ''' Handle upload file from user, if not in media directory, save it
    Args:
        f: a file upload by user 
        hash: upload file's hash value
    Return:
        boolean: whether saving is success
    '''
    file_path = os.path.join(settings.MEDIA_ROOT, hash)
    if not os.path.exists(file_path):
        with open(file_path, 'wb+') as destination:
            for chunk in f.chunks():
                destination.write(chunk)
        return True
    else:
        return False


# HTTP Error 404
def bad_request(request):
    # response = render_to_response('404.html', context_instance=RequestContext(request))
    # response.status_code = 404
    return render(request, '404.html')


# HTTP Error 500
def server_error(request):
    # response = render_to_response('500.html', context_instance=RequestContext(request))
    # response.status_code = 500
    return render(request, '500.html')
