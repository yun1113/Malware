# -*- coding: utf-8 -*-
from django.shortcuts import render, render_to_response, redirect
from django.db.models import Q
from django.template import RequestContext
from django.conf import settings
from django.views.static import serve
from django.core.mail import EmailMessage

from malwaredb.tasks import temuWork, profiling
from malwaredb.models import Malware, Upload, VirusTotalInfo
from malwaredb.forms import MalwareUploadFileForm, insertDB, ContactForm

from datetime import datetime
from ipware.ip import get_ip

import hashlib
import os


def malware_upload(request):
    if request.method == 'POST':
        form = MalwareUploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            f = request.FILES['file']

            # get hash value
            hash_value = hash_uploaded_file(f)

            # Save file to media
            success = handle_upload_file(f, hash_value)

            u = handle_file(f, hash_value, request)

            malware_num = len(Malware.objects.filter(~Q(detectionrate=0)))
            upload_num = len(Upload.objects.all())
            analysis_num = len(Malware.objects.all())

            return render(request, 'malware.html', locals())
    else:
        form = MalwareUploadFileForm()

    malware_num = len(Malware.objects.filter(~Q(detectionrate=0)))
    upload_num = len(Upload.objects.all())
    analysis_num = len(Malware.objects.all())

    return render(request, 'malware.html', {'form': form, 'malware_num': malware_num, 'upload_num': upload_num,
                                            'analysis_num': analysis_num})


def malware_search(request):
    # Search by Hash
    if request.GET.get('MD5', '') != "":
        searchText = request.GET['MD5']
        malware = Malware.objects.filter(Q(md5=searchText)).first()
        vendor_list = VirusTotalInfo.objects.filter(Q(malware=malware)).order_by('vendor')
    elif request.GET.get('SHA1', '') != "":
        searchText = request.GET['SHA1']
        malware = Malware.objects.filter(Q(sha1=searchText)).first()
        vendor_list = VirusTotalInfo.objects.filter(Q(malware=malware)).order_by('vendor')
    elif request.GET.get('SHA256', '') != "":
        searchText = request.GET['SHA256']
        malware = Malware.objects.filter(Q(sha256=searchText)).first()
        vendor_list = VirusTotalInfo.objects.filter(Q(malware=malware)).order_by('vendor')
    # Search by Keyword
    elif request.GET.get('keyword', '') != "":
        print("k")
        keyword = request.GET['keyword']
        vendor_list = VirusTotalInfo.objects.filter(Q(label__contains=keyword)).order_by('vendor')
    # Search by Family
    elif request.GET.get('family', '') != "":
        return render_to_response('malware_family2.html', locals())
    else:
        searchText = request.GET['hashSearchText']

    return render_to_response('malware_search.html', {'vendor_list': vendor_list})


def malware_family(request):
    return render_to_response('malware_family.html', locals())

def malware_family2(request):
    return render_to_response('malware_family2.html', locals())


def malware_download(request):
    file_dir = '/home/ants/Malware/project/vmp/malwaredb/templates/hooklog/'
    malware = request.GET['malware']
    malwares = Malware.objects.filter(sha256=malware)
    malware_hooklog = ""
    for filename in os.listdir(file_dir):
        if malwares[0].sha256 in filename:
            malware_hooklog = filename
            break
    filepath = file_dir + malware_hooklog
    # return serve(request, os.path.basename(filepath), os.path.dirname(filepath))
    from django.utils.encoding import smart_str
    from django.http import HttpResponse

    response = HttpResponse(
        content_type='application/octet-stream')
    response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(malware_hooklog)
    response['X-Sendfile'] = smart_str(filepath)
    return response

def malware_detail(request):
    malware_name = request.GET['malware']
    malware = Malware.objects.filter(hash=malware_name).first()

    hooklog_list = []
    for filename in os.listdir(os.getcwd() + "/malwaredb/templates/hooklog/"):
        if malware_name in filename:
            hooklog_list.append(filename)
    print(hooklog_list)
    return render_to_response('malware_detail.html', locals())


def load_hooklog_page(request, hash_value, page):
    if page != '' and int(page) > 0:
        hooklog_list = []
        for filename in os.listdir(os.getcwd() + "/malwaredb/templates/hooklog/"):
            if hash_value in filename:
                hooklog_list.append(filename)
        return render(request, "hooklog/" + hooklog_list[int(page) - 1], locals())
    else:
        return render(request, '404.html')


def contact(request):
    form_class = ContactForm

    if request.method == 'POST':
        form = form_class(data=request.POST)

        if form.is_valid():
            contact_name = request.POST.get('name', '')
            contact_email = request.POST.get('email', '')
            form_title = request.POST.get('title', '')
            form_content = request.POST.get('content', '')

            content = "Name: {0}\n" \
                      "Email: {1}\n" \
                      "Ttile: {2}\n" \
                      "Content: {3}".format(contact_name, contact_email, form_title, form_content)

            email = EmailMessage(
                "New contact form submission",
                content,
                "Your website" + '',
                ['yunyun1113c@gmail.com'],
                headers={'Reply-To': contact_email}
            )
            email.send()
            return redirect('contact')
    return render(request, 'contact.html', {
        'form': form_class,
    })


def loadvt(request, hash_value):
    if hash_value != '':
        return render(request, str(hash_value) + '_json.html', locals())
    else:
        return render(request, '404.html')


def malwareuploadFromLocal(request):
    if request.method == 'POST':
        f = request.FILES['uploadedfile']

        # Add to Upload model
        hash_value = hash_uploaded_file(f)

        # Save file
        success = handle_upload_file(f, hash_value)

        u = handle_file(f, hash_value, request)

        return render(request, 'malware.html')
    else:
        form = MalwareUploadFileForm()
    return render(request, 'malware.html')


def handle_file(f, hash_value, request):
    # Add to Upload model
    u = Upload()
    u.name = f.name
    u.size = f.size
    u.hash = hash_value
    u.submissiondate = datetime.now()

    ip = get_ip(request)
    if ip is not None:
        u.user_ip = ip

    u.save()

    # if malware not exist in db
    if len(Malware.objects.filter(hash=hash_value)) == 0:
        # insert Malware data
        m = Malware()
        m.hash = hash_value
        m.submissiondate = datetime.now()
        m.detectionrate = 0.8
        m.virustotalurl = hash_value
        m.vmp = hash_value
        m.save()

    # Celery task
    # temuWork.delay(hash)
    profiling.delay(hash_value)

    return u


def hash_uploaded_file(f):
    ''' Input file then return file's hash value
    Args:
        f: a file upload by user 
    Return:
        hash: file's hash value
    '''
    hash_value = hashlib.sha256()
    for chunk in f.chunks():
        hash_value.update(chunk)
    return hash_value.hexdigest()


def handle_upload_file(f, hash):
    ''' Handle upload file from user, if not in media directory, save it
    Args:
        f: a file upload by user 
        hash: upload file's hash value
    Return:
        boolean: whether saving is success
    '''
    file_path = os.path.join(settings.MEDIA_ROOT, hash)
    if not os.path.exists(file_path):
        with open(file_path, 'wb+') as destination:
            for chunk in f.chunks():
                destination.write(chunk)
        return True
    else:
        return False


# HTTP Error 404
def bad_request(request):
    # response = render_to_response('404.html', context_instance=RequestContext(request))
    # response.status_code = 404
    return render(request, '404.html')


# HTTP Error 500
def server_error(request):
    # response = render_to_response('500.html', context_instance=RequestContext(request))
    # response.status_code = 500
    return render(request, '500.html')
