from .models import VirusTotalInfo, Malware, VirusTotal
from datetime import datetime
import urllib
import urllib2
import json
import os


def get_api(malware_hash):

    url = "https://www.virustotal.com/vtapi/v2/file/report"
    parameters = {"resource": malware_hash, "apikey": "92b3ab3619912133954ace582818162e4f0bba82cd2a994c7c894ef9f52bf9a5"}
    data = urllib.urlencode(parameters)
    binary_data = data.encode("utf8")

    req = urllib2.Request(url, binary_data)
    response = urllib2.urlopen(req)
    json_content = response.read()

    with open(os.getcwd() + '/malwaredb/virus_total/' + malware_hash, 'wb') as f:
        f.write(json_content)

    with open(os.getcwd() + '/malwaredb/virus_total/' + malware_hash, 'r') as f:
        malware = Malware.objects.get(hash=malware_hash)
        defaults = {'virus_total': json_content}
        virus_total, created = VirusTotal.objects.update_or_create(malware=malware, defaults=defaults)
        virus_total.virus_total_file.save(malware_hash, f)
        save_virustotal_info(virus_total, json_content)


def save_virustotal_info(virus_total, json_content):

    virustotal_info = json.loads(json_content)
    vendorinfo_dict = virustotal_info.get('scans', None)

    detect_ratio = virustotal_info['positives'] / (virustotal_info['total'] * 1.0)
    Malware.objects.filter(hash=virustotal_info["resource"])\
        .update(detectionrate=detect_ratio, virustotalurl=virustotal_info['permalink'],
                firstseen=datetime.strptime(virustotal_info['scan_date'], "%Y-%m-%d %H:%M:%S").date(),
                md5=virustotal_info['md5'], sha1=virustotal_info['sha1'], sha256=virustotal_info['sha256'])

    if vendorinfo_dict:
        for vendor, vendorinfo in vendorinfo_dict.items():
            default_conetent = {"vendor": vendor, "md5": virustotal_info.get('md5', ""),
                                "version": vendorinfo.get('version', ""), "detected": vendorinfo.get('detected', ""),
                                "label": vendorinfo['result'] if vendorinfo.get('result', "") else "null",
                                "update_date": datetime.strptime(vendorinfo.get('update', ""), "%Y%m%d").date() if vendorinfo.get('update') else None,
                                "malware": Malware.objects.get(hash=virustotal_info.get("resource","")),
                                }
            VirusTotalInfo.objects.update_or_create(vendor=vendor, md5=virustotal_info['md5'], virus_total=virus_total,
                                                    defaults=default_conetent,)


## wanna change to parse_to_xml(hash)
def parse_to_xml(hash, json_content):
    # [input] parser-json-xml.py file-hash
    output_dir= os.getcwd() + "/malwaredb/templates/"

    data = json.loads(json_content)
    fh = None
    try:
        fh = open(output_dir+hash+"_json.html", "w")
        if 'scans' in data:
            fh.write('<table style="width:100%">\n')
            for item in data['scans'].items():
                fh.write('<tr>\n')
                fh.write('<td>' + str(item[0]) + '</td>\n')
                for attr_key, attr_value in item[1].items():
                    #fh.write('<td>' + str(attr_key) + " " + str(attr_value) + '</td>\n')
                    fh.write('<td>' + str(attr_value) + '</td>\n')
                fh.write("</tr>\n")
            fh.write('</table>')
        else:
            fh.write("There's no result")
    finally:
        if fh != None:
            fh.close()   
