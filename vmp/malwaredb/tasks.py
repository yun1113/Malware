from __future__ import absolute_import

from django.conf import settings
from django.core.files.base import ContentFile
from django.utils.timezone import datetime

from malwaredb.models import Malware, Hooklog, VirusTotal, VirusTotalInfo

from celery import shared_task
import requests
import json
import docker
import os
import time

BASE_DIR = settings.BASE_DIR


@shared_task
def profiling(hash_value, streaming=False, server_ip=settings.LOCAL_IP, server_port="10001"):

    print("Step0. Get Virustotal Data")
    get_virustotal_data(hash_value)

    for i in range(3):  # try three times

        print("Step1. Create Client")
        client = docker.APIClient(base_url='unix://var/run/docker.sock', version='1.21')

        print("Step2. Create container")
        container = client.create_container(image=settings.DOCKER_IMAGE, stdin_open=True, tty=True,
                                            command="./home/root/automation/script/profiling.sh {0} {1} {2} {3}".format(
                                                hash_value, "true" if streaming else "false", server_ip, server_port),
                                            volumes=['/home/root/VMimage', '/home/root/malware',
                                                     '/home/root/automation', '/home/root/malwaredb'],
                                            host_config=client.create_host_config(privileged=True, binds=[
                                                BASE_DIR + '/VMimage:/home/root/VMimage',
                                                BASE_DIR + '/media/uploads:/home/root/malware',
                                                BASE_DIR + '/automation:/home/root/automation',
                                                BASE_DIR + '/malwaredb:/home/root/malwaredb']))

        print("Step3. Start Container")
        client.start(container)

        print("Step4. After 10 mins...")
        time.sleep(600)  # 10 min

        while len(client.containers(filters={'id': container['Id']})) != 0:
            print("Step5. After more 1 min...")
            time.sleep(60)

        create_hooklog_state = save_hooklog_in_db(hash_value)
        if create_hooklog_state:
            Malware.objects.filter(hash=hash_value).update(create_hooklog_state=create_hooklog_state)
            print("Step6. Remove Container")
            client.remove_container(container['Id'])
            break
        else:
            print("Step6. Excute Log")
            with open(BASE_DIR + "/malwaredb/docker_logs/"+container['Id']+"_"+str(i), "w") as f:
                f.write(client.logs(container))
            print("Step7. Remove Container")
            client.remove_container(container['Id'])


def save_hooklog_in_db(hash_value):
    success = False
    output_path = BASE_DIR + "/automation/output/"

    for filename in os.listdir(output_path):
        if hash_value in filename and ".hooklog" in filename:
            # update hooklog model
            with open(output_path + filename, "r") as f:
                malware = Malware.objects.get(hash=hash_value)
                hooklog, created = Hooklog.objects.get_or_create(hooklog=f.read(), malware=malware)
                f.seek(0)
                hooklog.hooklog_file.save(filename, f)

            success = True
    return success


def get_virustotal_data(malware_hash):

    # get malware data from virus total
    url = "https://www.virustotal.com/vtapi/v2/file/report"
    parameters = {"resource": malware_hash, "apikey": settings.VIRUSTOTAL_KEY}

    response = requests.post(url, data=parameters)
    result = response.content

    # add/update malware data to virus total table
    malware = Malware.objects.get(hash=malware_hash)
    virus_total, created = VirusTotal.objects.update_or_create(malware=malware, defaults={'virus_total': result})
    if created:
        virus_total.virus_total_file.save(malware_hash, ContentFile(result))
    elif result != virus_total.virus_total:
        with open(virus_total.virus_total_file.path, 'w') as f:
            f.write(result)

    virus_total.save()

    # update malware data
    virustotal_info = json.loads(result)
    if virustotal_info.get('response_code', None):
        malware.virustotalurl = virustotal_info.get('permalink', '')
        malware.md5 = virustotal_info.get('md5', '')
        malware.sha1 = virustotal_info.get('sha1', '')
        malware.sha256 = virustotal_info.get('sha256', '')

        if virustotal_info.get('scan_date', None):
            malware.firstseen = datetime.strptime(virustotal_info.get('scan_date'), "%Y-%m-%d %H:%M:%S").date()
        if virustotal_info.get('positives', None) and virustotal_info.get('total', None):
            malware.detectionrate = virustotal_info.get('positives') / (virustotal_info.get('total') * 1.0)

        malware.save()

    # update virus total info
    if virustotal_info.get('scans', {}):
        for vendor, vendor_info in virustotal_info.get('scans', {}).items():

            if vendor_info.get('update', None):
                update_date = datetime.strptime(vendor_info.get('update', ""), "%Y%m%d").date()

            default_conetent = {
                "vendor": vendor,
                "md5": virustotal_info.get('md5', ""),
                "version": vendor_info.get('version', ""),
                "detected": vendor_info.get('detected', ""),
                "label": vendor_info.get('result', "null"),
                "update_date": update_date if vendor_info.get('update', None) else None,
                "malware": malware,
                }

            VirusTotalInfo.objects.update_or_create(vendor=vendor, virus_total=virus_total, defaults=default_conetent,)
